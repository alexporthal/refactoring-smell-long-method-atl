-- @nsURI MM=http://www.eclipse.org/MoDisco/kdm/code
-- @nsURI MMC=http://www.eclipse.org/MoDisco/kdm/core
-- @nsURI MMA=http://www.eclipse.org/MoDisco/kdm/action
-- @nsURI MMS=http://www.eclipse.org/MoDisco/kdm/structure

module create_propagation;
create OUT: MMC, OUT2: MMA, OUT3: MMS, OUT4: MM
refining IN: MMC, IN2: MMA, IN3: MMS, IN4: MM;

rule createPropagation {
	from
		source: MMC!AggregatedRelationship(
			(source.to = thisModule.getToFrom('model')) and
			(source.from = thisModule.getToFrom('controller'))
		)
	to
		target: MMC!AggregatedRelationship(
			density <- source.density + 1
			--,
			--relation <- thisModule.findCall(thisModule.getBlockUnitMethod(
			--				thisModule.getMethodUnit(
			--					thisModule.getClassUnit('ControllerPessoa')
			--				, 'longMethodDoModel')
			--			))
		)
}	

helper def: getToFrom(nameStructure: String):
	MMS!Layer =
		MMS!Layer.allInstances() -> any(e | e.implementation.first().name = nameStructure);
			
helper def: getClassUnit(className: String): MM!ClassUnit =
	MM!ClassUnit.allInstances() -> any(e | e.name = className);

helper def: getMethodUnit(classUnitToGetMethod: MM!ClassUnit, nameMethod: String):
		MM!MethodUnit =
			classUnitToGetMethod.codeElement -> any(e | e.name.equalsIgnoreCase(nameMethod));

helper def: getBlockUnitMethod(methodFrom: MM!MethodUnit):
		MM!BlockUnit = 
			methodFrom.codeElement->any(e | e.oclIsTypeOf(MM!BlockUnit));			
			
helper def: findCall(block: MM!BlockUnit):
		MMA!Calls = 
			block.codeElement->any(e | (e.oclIsTypeOf(MMA!ActionElement)) and 
					( thisModule.getActionElement(  ) ) );
			
helper def: getActionElement(ae: MMA!ActionElement):
		Boolean =  ( (ae.actionRelation.first().getTo() = thisModule.getMethodUnit(thisModule.getClassUnit('Pessoa'), 'newMethod') )
					and (ae.actionRelation.first().getFrom().name = 'method invocation') );			
			
			
			
			